version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: user-postgres
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: user-redis
    ports:
      - "6379:6379"
    networks:
      - monitoring-network

  # User Service
  user-service:
    build:
      context: .
      dockerfile: dockerfiles/user.dockerfile
    container_name: user-service
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=user
      - DATABASE_PASSWORD=password
      - DATABASE_NAME=userdb
      - DATABASE_SSL_MODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-secret-key-change-in-production
      - HTTP_PORT=8080
      - GRPC_PORT=9090
      - GIN_MODE=release
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    depends_on:
      - postgres
      - redis
      - jaeger
    networks:
      - monitoring-network

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: dockerfiles/product.dockerfile
    container_name: product-service
    ports:
      - "8081:8081"
      - "9091:9091"
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=user
      - DATABASE_PASSWORD=password
      - DATABASE_NAME=productdb
      - DATABASE_SSL_MODE=disable
      - USER_SERVICE_URL=http://user-service:8080
      - HTTP_PORT=8081
      - GRPC_PORT=9091
      - GIN_MODE=release
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    depends_on:
      - postgres
      - user-service
      - jaeger
    networks:
      - monitoring-network

  # Basket Service
  basket-service:
    build:
      context: .
      dockerfile: dockerfiles/basket.dockerfile
    container_name: basket-service
    ports:
      - "8083:8083"
      - "9093:9093"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - USER_SERVICE_URL=user-service:9090
      - PRODUCT_SERVICE_URL=product-service:9091
      - HTTP_PORT=8083
      - GRPC_PORT=9093
      - GIN_MODE=release
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    depends_on:
      - redis
      - user-service
      - product-service
      - jaeger
    networks:
      - monitoring-network

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "6831:6831/udp"
      - "6832:6832/udp"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitoring-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - monitoring-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  monitoring-network:
    driver: bridge
