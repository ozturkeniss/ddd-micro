name: ⚡ Performance Bot

on:
  schedule:
    # Haftalık performans analizi (Çarşamba 04:00 UTC)
    - cron: '0 4 * * 3'
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  performance-analysis:
    name: ⚡ Performance Analyzer
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      checks: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.21'
    
    - name: Set up Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '18'
    
    - name: Go Performance Analysis
      run: |
        echo "⚡ Running Go performance analysis..."
        
        # Install performance tools
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        go install github.com/dominikh/go-tools/cmd/staticcheck@latest
        
        # Run performance-focused lints
        echo "🔍 Running performance-focused lints..."
        $(go env GOPATH)/bin/golangci-lint run --enable=prealloc,unused,deadcode,ineffassign ./... > performance-lint.txt 2>&1 || true
        
        # Run static analysis
        echo "🔍 Running static analysis..."
        $(go env GOPATH)/bin/staticcheck ./... > static-analysis.txt 2>&1 || true
        
        # Check for performance issues
        if grep -q "inefficient" performance-lint.txt || grep -q "unused" performance-lint.txt; then
          echo "⚠️ Performance issues found!"
          cat performance-lint.txt
        else
          echo "✅ No performance issues found"
        fi
    
    - name: Memory Usage Analysis
      run: |
        echo "🧠 Analyzing memory usage patterns..."
        
        # Build services with race detector
        go build -race -o bin/user-service ./cmd/user || true
        go build -race -o bin/product-service ./cmd/product || true
        go build -race -o bin/basket-service ./cmd/basket || true
        go build -race -o bin/payment-service ./cmd/payment || true
        
        # Check binary sizes
        echo "📦 Binary size analysis:" > binary-sizes.txt
        echo "========================" >> binary-sizes.txt
        ls -lh bin/ >> binary-sizes.txt 2>/dev/null || echo "No binaries found" >> binary-sizes.txt
    
    - name: Frontend Performance Analysis
      run: |
        echo "⚡ Running frontend performance analysis..."
        
        cd client
        
        # Install performance tools
        npm install -g lighthouse-ci
        
        # Build the project
        npm run build || echo "Build failed, continuing..."
        
        # Analyze bundle size
        npm install -g webpack-bundle-analyzer
        npx webpack-bundle-analyzer .next/static/chunks/*.js > ../frontend-performance.txt 2>&1 || true
        
        cd ..
    
    - name: Database Performance Check
      run: |
        echo "🗄️ Checking database performance patterns..."
        
        # Look for potential N+1 queries in the codebase
        grep -r "for.*range.*{" internal/ --include="*.go" > potential-n-plus-1.txt || true
        grep -r "SELECT.*WHERE.*IN" internal/ --include="*.go" > potential-in-queries.txt || true
        
        echo "🔍 Potential performance issues found:" > db-performance.txt
        echo "=====================================" >> db-performance.txt
        echo "" >> db-performance.txt
        echo "Potential N+1 queries:" >> db-performance.txt
        cat potential-n-plus-1.txt >> db-performance.txt 2>/dev/null || echo "None found" >> db-performance.txt
        echo "" >> db-performance.txt
        echo "Potential IN queries:" >> db-performance.txt
        cat potential-in-queries.txt >> db-performance.txt 2>/dev/null || echo "None found" >> db-performance.txt
    
    - name: Auto-optimize Performance Issues
      run: |
        echo "🔧 Attempting to auto-optimize performance issues..."
        
        # Remove unused imports
        go install golang.org/x/tools/cmd/goimports@latest
        $(go env GOPATH)/bin/goimports -w .
        
        # Remove unused variables (basic cleanup)
        go install honnef.co/go/tools/cmd/staticcheck@latest
        $(go env GOPATH)/bin/staticcheck -checks=U1000 ./... > unused-code.txt 2>&1 || true
        
        # Check if there are changes
        if ! git diff --quiet; then
          echo "🔧 Performance optimizations applied, committing..."
          git config --local user.email "performance-bot@ddd-micro.com"
          git config --local user.name "⚡ Performance Bot"
          git add .
          git commit -m "⚡ Auto-optimize: Apply performance improvements

        - Removed unused imports and variables
        - Applied performance optimizations
        - Auto-committed by performance bot"
          git push
          echo "✅ Performance optimizations applied and committed"
        else
          echo "✅ No performance optimizations needed"
        fi
    
    - name: Generate Performance Report
      run: |
        echo "📊 Generating performance report..."
        
        CURRENT_DATE=$(date '+%Y-%m-%d')
        
        # Create comprehensive performance report
        cat > performance-report-$CURRENT_DATE.md << EOF
        # ⚡ Performance Report - $CURRENT_DATE
        
        ## 📊 Analysis Summary
        - **Analysis Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')
        - **Go Version:** $(go version)
        - **Node Version:** $(node --version)
        
        ## 🔍 Go Performance Analysis
        \`\`\`
        $(cat performance-lint.txt || echo "No performance issues found")
        \`\`\`
        
        ## 🔍 Static Analysis Results
        \`\`\`
        $(cat static-analysis.txt || echo "No static analysis issues found")
        \`\`\`
        
        ## 📦 Binary Size Analysis
        \`\`\`
        $(cat binary-sizes.txt || echo "No binary size data available")
        \`\`\`
        
        ## 🗄️ Database Performance Analysis
        \`\`\`
        $(cat db-performance.txt || echo "No database performance issues found")
        \`\`\`
        
        ## 🧠 Memory Usage Analysis
        \`\`\`
        $(cat unused-code.txt || echo "No unused code found")
        \`\`\`
        
        ## ⚡ Frontend Performance Analysis
        \`\`\`
        $(cat frontend-performance.txt || echo "No frontend performance data available")
        \`\`\`
        
        ## ✅ Performance Recommendations
        1. Review and optimize database queries
        2. Minimize memory allocations in hot paths
        3. Use connection pooling for database connections
        4. Implement caching where appropriate
        5. Monitor and optimize bundle sizes
        
        ---
        *Generated by Performance Bot ⚡*
        EOF
        
        # Commit performance report
        git config --local user.email "performance-bot@ddd-micro.com"
        git config --local user.name "⚡ Performance Bot"
        git add performance-report-$CURRENT_DATE.md
        git commit -m "⚡ Performance: Weekly performance analysis report for $CURRENT_DATE

        - Generated comprehensive performance report
        - Analyzed Go and frontend performance
        - Auto-committed by performance bot"
        git push
        echo "✅ Performance report generated and committed"
    
    - name: Create Performance Benchmarks
      run: |
        echo "📈 Creating performance benchmarks..."
        
        # Create a simple benchmark file if it doesn't exist
        if [ ! -f "benchmarks_test.go" ]; then
          cat > benchmarks_test.go << EOF
        package main
        
        import (
        	"testing"
        	"time"
        )
        
        func BenchmarkSystemPerformance(b *testing.B) {
        	for i := 0; i < b.N; i++ {
        		// Simulate some work
        		time.Sleep(1 * time.Microsecond)
        	}
        }
        
        func BenchmarkMemoryAllocation(b *testing.B) {
        	b.ReportAllocs()
        	for i := 0; i < b.N; i++ {
        		_ = make([]byte, 1024)
        	}
        }
        EOF
          
          # Commit benchmark file
          git config --local user.email "performance-bot@ddd-micro.com"
          git config --local user.name "⚡ Performance Bot"
          git add benchmarks_test.go
          git commit -m "📈 Performance: Add performance benchmarks

          - Added system performance benchmarks
          - Added memory allocation benchmarks
          - Auto-committed by performance bot"
          git push
          echo "✅ Performance benchmarks created and committed"
        fi
