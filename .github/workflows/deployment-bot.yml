name: 🚀 Deployment Bot

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  build-and-test:
    name: 🏗️ Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.21'
    
    - name: Build all services
      run: |
        echo "🏗️ Building all microservices..."
        
        # Build user service
        echo "Building User Service..."
        cd cmd/user && go build -o ../../bin/user-service . && cd ../..
        
        # Build product service
        echo "Building Product Service..."
        cd cmd/product && go build -o ../../bin/product-service . && cd ../..
        
        # Build basket service
        echo "Building Basket Service..."
        cd cmd/basket && go build -o ../../bin/basket-service . && cd ../..
        
        # Build payment service
        echo "Building Payment Service..."
        cd cmd/payment && go build -o ../../bin/payment-service . && cd ../..
        
        echo "✅ All services built successfully"
    
    - name: Run tests
      run: |
        echo "🧪 Running tests..."
        go test ./... -v
    
    - name: Create deployment artifacts
      run: |
        echo "📦 Creating deployment artifacts..."
        
        # Create deployment directory
        mkdir -p deployment-artifacts
        
        # Copy binaries
        cp bin/* deployment-artifacts/
        
        # Copy configuration files
        cp docker-compose*.yml deployment-artifacts/
        cp *.yml deployment-artifacts/
        
        # Copy dockerfiles
        cp -r dockerfiles deployment-artifacts/
        
        # Create deployment script
        cat > deployment-artifacts/deploy.sh << 'EOF'
        #!/bin/bash
        echo "🚀 Starting deployment..."
        
        # Stop existing services
        docker-compose down
        
        # Pull latest images
        docker-compose pull
        
        # Start services
        docker-compose up -d
        
        # Health check
        echo "🔍 Performing health checks..."
        sleep 30
        
        # Check service health
        for service in user-service product-service basket-service payment-service; do
          if curl -f http://localhost:8081/health > /dev/null 2>&1; then
            echo "✅ $service is healthy"
          else
            echo "❌ $service is not responding"
            exit 1
          fi
        done
        
        echo "✅ Deployment completed successfully"
        EOF
        
        chmod +x deployment-artifacts/deploy.sh
        
        # Create version info
        cat > deployment-artifacts/version.txt << EOF
        Version: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        Build Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        Built By: GitHub Actions
        EOF
        
        echo "📦 Deployment artifacts created"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifacts
        path: deployment-artifacts/

  deploy-staging:
    name: 🚀 Deploy to Staging
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v6
      with:
        name: deployment-artifacts
        path: deployment-artifacts/
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        
        cd deployment-artifacts
        
        # Set environment variables
        export ENVIRONMENT=staging
        export DOCKER_COMPOSE_FILE=docker-compose-staging.yml
        
        # Run deployment
        ./deploy.sh
        
        echo "✅ Staging deployment completed"
    
    - name: Create deployment notification
      run: |
        echo "📢 Creating deployment notification..."
        
        # Create deployment summary
        cat > deployment-summary.md << EOF
        # 🚀 Deployment Summary - Staging
        
        ## 📋 Deployment Details
        - **Environment:** Staging
        - **Version:** ${{ github.ref_name }}
        - **Commit:** ${{ github.sha }}
        - **Deployed At:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        ## 🏗️ Services Deployed
        - ✅ User Service (Port 8081)
        - ✅ Product Service (Port 8082)
        - ✅ Basket Service (Port 8083)
        - ✅ Payment Service (Port 8084)
        
        ## 🔍 Health Check URLs
        - User Service: http://staging.ddd-micro.com:8081/health
        - Product Service: http://staging.ddd-micro.com:8082/health
        - Basket Service: http://staging.ddd-micro.com:8083/health
        - Payment Service: http://staging.ddd-micro.com:8084/health
        
        ## 📊 Monitoring
        - Prometheus: http://staging.ddd-micro.com:9090
        - Grafana: http://staging.ddd-micro.com:3000
        - Jaeger: http://staging.ddd-micro.com:16686
        
        ---
        *Deployed by Deployment Bot 🚀*
        EOF
        
        # Create GitHub issue
        gh issue create \
          --title "🚀 Staging Deployment Completed - ${{ github.ref_name }}" \
          --body-file deployment-summary.md \
          --label "deployment,staging,bot"
      
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    name: 🚀 Deploy to Production
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v6
      with:
        name: deployment-artifacts
        path: deployment-artifacts/
    
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        
        cd deployment-artifacts
        
        # Set environment variables
        export ENVIRONMENT=production
        export DOCKER_COMPOSE_FILE=docker-compose-production.yml
        
        # Run deployment with backup
        echo "📦 Creating backup..."
        # Backup logic would go here
        
        # Run deployment
        ./deploy.sh
        
        echo "✅ Production deployment completed"
    
    - name: Create production deployment notification
      run: |
        echo "📢 Creating production deployment notification..."
        
        # Create deployment summary
        cat > production-deployment-summary.md << EOF
        # 🚀 Production Deployment Summary
        
        ## 📋 Deployment Details
        - **Environment:** Production
        - **Version:** ${{ github.ref_name }}
        - **Commit:** ${{ github.sha }}
        - **Deployed At:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        ## 🏗️ Services Deployed
        - ✅ User Service (Port 8081)
        - ✅ Product Service (Port 8082)
        - ✅ Basket Service (Port 8083)
        - ✅ Payment Service (Port 8084)
        
        ## 🔍 Production URLs
        - API Gateway: https://api.ddd-micro.com
        - User Service: https://user.ddd-micro.com
        - Product Service: https://product.ddd-micro.com
        - Basket Service: https://basket.ddd-micro.com
        - Payment Service: https://payment.ddd-micro.com
        
        ## 📊 Production Monitoring
        - Prometheus: https://monitoring.ddd-micro.com:9090
        - Grafana: https://monitoring.ddd-micro.com:3000
        - Jaeger: https://monitoring.ddd-micro.com:16686
        
        ## 🔒 Security
        - SSL Certificates: ✅ Valid
        - Security Headers: ✅ Configured
        - Rate Limiting: ✅ Active
        
        ---
        *Deployed by Deployment Bot 🚀*
        EOF
        
        # Create GitHub release
        gh release create ${{ github.ref_name }} \
          --title "Release ${{ github.ref_name }}" \
          --notes-file production-deployment-summary.md \
          --latest
      
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  rollback:
    name: 🔄 Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Rollback deployment
      run: |
        echo "🔄 Rolling back deployment..."
        
        # Rollback logic would go here
        # This would typically involve:
        # 1. Stopping current services
        # 2. Restoring from backup
        # 3. Starting previous version
        
        echo "🔄 Rollback completed"
    
    - name: Create rollback notification
      run: |
        echo "📢 Creating rollback notification..."
        
        # Create rollback issue
        gh issue create \
          --title "🔄 Deployment Rollback Required" \
          --body "## 🚨 Deployment Rollback
        
        The deployment has failed and requires manual intervention.
        
        ### Details
        - **Failed Deployment:** ${{ github.ref_name }}
        - **Failure Time:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
        - **Environment:** ${{ github.event.inputs.environment || 'staging' }}
        
        ### Action Required
        Please investigate and perform manual rollback if necessary.
        
        ---
        *Generated by Deployment Bot 🚀*" \
          --label "rollback,deployment,bot,urgent"
      
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
