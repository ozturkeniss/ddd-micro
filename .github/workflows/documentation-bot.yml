name: 📚 Documentation Bot

on:
  schedule:
    # Her gün saat 05:00'da çalış
    - cron: '0 5 * * *'
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  documentation:
    name: 📚 Documentation Generator
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install documentation tools
      run: |
        echo "📚 Installing documentation tools..."
        go install golang.org/x/tools/cmd/godoc@latest
        go install github.com/swaggo/swag/cmd/swag@latest
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    
    - name: Generate API documentation
      run: |
        echo "📚 Generating API documentation..."
        
        # Create docs directory
        mkdir -p docs/api
        
        # Generate Swagger docs for each service
        echo "Generating User Service API docs..."
        cd cmd/user && swag init -g main.go -o ../../docs/api/user && cd ../..
        
        echo "Generating Product Service API docs..."
        cd cmd/product && swag init -g main.go -o ../../docs/api/product && cd ../..
        
        echo "Generating Basket Service API docs..."
        cd cmd/basket && swag init -g main.go -o ../../docs/api/basket && cd ../..
        
        echo "Generating Payment Service API docs..."
        cd cmd/payment && swag init -g main.go -o ../../docs/api/payment && cd ../..
        
        echo "📚 API documentation generated"
    
    - name: Generate code documentation
      run: |
        echo "📚 Generating code documentation..."
        
        # Create code docs directory
        mkdir -p docs/code
        
        # Generate Go documentation
        godoc -http=:6060 &
        GODOC_PID=$!
        sleep 5
        
        # Save documentation
        curl -s http://localhost:6060/pkg/github.com/ddd-micro/ > docs/code/index.html
        
        # Kill godoc server
        kill $GODOC_PID
        
        echo "📚 Code documentation generated"
    
    - name: Generate architecture documentation
      run: |
        echo "📚 Generating architecture documentation..."
        
        # Create architecture docs
        cat > docs/architecture.md << 'EOF'
        # 🏗️ DDD Microservices Architecture
        
        ## 📋 Overview
        This project implements a Domain-Driven Design (DDD) microservices architecture using Go.
        
        ## 🎯 Services
        
        ### User Service
        - **Port:** 8081
        - **Responsibility:** User management, authentication, authorization
        - **Database:** PostgreSQL
        - **API:** REST + gRPC
        
        ### Product Service
        - **Port:** 8082
        - **Responsibility:** Product catalog, inventory management
        - **Database:** PostgreSQL
        - **API:** REST + gRPC
        
        ### Basket Service
        - **Port:** 8083
        - **Responsibility:** Shopping cart management
        - **Database:** Redis
        - **API:** gRPC
        
        ### Payment Service
        - **Port:** 8084
        - **Responsibility:** Payment processing, billing
        - **Database:** PostgreSQL
        - **API:** REST
        
        ## 🔄 Communication Patterns
        - **Synchronous:** gRPC for internal service communication
        - **Asynchronous:** Kafka for event-driven communication
        - **HTTP:** REST APIs for external clients
        
        ## 🏗️ Infrastructure
        - **Containerization:** Docker
        - **Orchestration:** Docker Compose
        - **Monitoring:** Prometheus + Grafana
        - **Tracing:** Jaeger
        - **Message Queue:** Kafka
        
        ## 🔒 Security
        - **Authentication:** JWT tokens
        - **Authorization:** Role-based access control
        - **API Security:** HTTPS, CORS
        - **Database:** Encrypted connections
        
        ---
        *Generated by Documentation Bot 📚*
        EOF
        
        echo "📚 Architecture documentation generated"
    
    - name: Generate deployment documentation
      run: |
        echo "📚 Generating deployment documentation..."
        
        # Create deployment docs
        cat > docs/deployment.md << 'EOF'
        # 🚀 Deployment Guide
        
        ## 📋 Prerequisites
        - Docker and Docker Compose
        - Go 1.21+
        - Git
        
        ## 🏗️ Local Development
        
        ### Quick Start
        ```bash
        # Clone repository
        git clone https://github.com/ddd-micro/ddd-micro.git
        cd ddd-micro
        
        # Start all services
        docker-compose up -d
        
        # Check service health
        curl http://localhost:8081/health  # User Service
        curl http://localhost:8082/health  # Product Service
        curl http://localhost:8083/health  # Basket Service
        curl http://localhost:8084/health  # Payment Service
        ```
        
        ### Development Setup
        ```bash
        # Install dependencies
        go mod download
        
        # Run tests
        go test ./...
        
        # Build services
        go build -o bin/user-service ./cmd/user
        go build -o bin/product-service ./cmd/product
        go build -o bin/basket-service ./cmd/basket
        go build -o bin/payment-service ./cmd/payment
        ```
        
        ## 🌐 Production Deployment
        
        ### Environment Variables
        - `DB_HOST`: Database host
        - `DB_PORT`: Database port
        - `DB_USER`: Database user
        - `DB_PASSWORD`: Database password
        - `REDIS_HOST`: Redis host
        - `KAFKA_BROKERS`: Kafka broker addresses
        
        ### Docker Deployment
        ```bash
        # Production deployment
        docker-compose -f docker-compose-production.yml up -d
        ```
        
        ## 📊 Monitoring
        - **Prometheus:** http://localhost:9090
        - **Grafana:** http://localhost:3000
        - **Jaeger:** http://localhost:16686
        
        ---
        *Generated by Documentation Bot 📚*
        EOF
        
        echo "📚 Deployment documentation generated"
    
    - name: Generate API reference
      run: |
        echo "📚 Generating API reference..."
        
        # Create API reference
        cat > docs/api-reference.md << 'EOF'
        # 📚 API Reference
        
        ## 🔗 Service Endpoints
        
        ### User Service (Port 8081)
        - `POST /api/v1/users/register` - Register new user
        - `POST /api/v1/users/login` - User login
        - `GET /api/v1/users/profile` - Get user profile
        - `PUT /api/v1/users/profile` - Update user profile
        
        ### Product Service (Port 8082)
        - `GET /api/v1/products` - List products
        - `POST /api/v1/products` - Create product
        - `GET /api/v1/products/:id` - Get product
        - `PUT /api/v1/products/:id` - Update product
        
        ### Basket Service (Port 8083)
        - `POST /api/v1/baskets` - Create basket
        - `GET /api/v1/baskets` - Get user basket
        - `POST /api/v1/baskets/items` - Add item to basket
        - `DELETE /api/v1/baskets/items/:id` - Remove item from basket
        
        ### Payment Service (Port 8084)
        - `POST /api/v1/payments` - Create payment
        - `GET /api/v1/payments/:id` - Get payment
        - `POST /api/v1/payments/:id/process` - Process payment
        - `POST /api/v1/payments/:id/cancel` - Cancel payment
        
        ## 🔒 Authentication
        All API endpoints (except registration and login) require authentication.
        Include the JWT token in the Authorization header:
        ```
        Authorization: Bearer <your-jwt-token>
        ```
        
        ## 📊 Response Format
        All API responses follow this format:
        ```json
        {
          "status": "success|error",
          "message": "Response message",
          "data": { ... },
          "timestamp": "2024-01-01T00:00:00Z"
        }
        ```
        
        ---
        *Generated by Documentation Bot 📚*
        EOF
        
        echo "📚 API reference generated"
    
    - name: Update README
      run: |
        echo "📚 Updating README..."
        
        # Get current date
        CURRENT_DATE=$(date '+%Y-%m-%d')
        
        # Update README if it exists
        if [ -f README.md ]; then
          # Add documentation section if not exists
          if ! grep -q "## 📚 Documentation" README.md; then
            cat >> README.md << EOF
        
        ## 📚 Documentation
        - [Architecture](docs/architecture.md)
        - [API Reference](docs/api-reference.md)
        - [Deployment Guide](docs/deployment.md)
        - [API Documentation](docs/api/)
        
        *Last updated: $CURRENT_DATE*
        EOF
          fi
        else
          # Create README if it doesn't exist
          cat > README.md << EOF
        # 🏗️ DDD Microservices Project
        
        A Domain-Driven Design microservices architecture implemented in Go.
        
        ## 🎯 Services
        - **User Service** - User management and authentication
        - **Product Service** - Product catalog and inventory
        - **Basket Service** - Shopping cart management
        - **Payment Service** - Payment processing
        
        ## 📚 Documentation
        - [Architecture](docs/architecture.md)
        - [API Reference](docs/api-reference.md)
        - [Deployment Guide](docs/deployment.md)
        - [API Documentation](docs/api/)
        
        ## 🚀 Quick Start
        \`\`\`bash
        docker-compose up -d
        \`\`\`
        
        *Last updated: $CURRENT_DATE*
        EOF
        fi
        
        echo "📚 README updated"
    
    - name: Commit documentation
      run: |
        echo "💾 Committing documentation..."
        
        git config --local user.email "bot@ddd-micro.com"
        git config --local user.name "📚 Documentation Bot"
        
        # Commit documentation
        git add docs/ README.md
        git commit -m "📚 Auto-docs: Update project documentation

        - Generated API documentation for all services
        - Updated architecture documentation
        - Created deployment guide
        - Updated README with latest information
        - Auto-committed by documentation bot" || echo "No changes to commit"
        
        git push || echo "Nothing to push"
        echo "✅ Documentation committed"
    
    - name: Create documentation summary
      run: |
        echo "📋 Creating documentation summary..."
        
        # Create summary
        cat > docs/documentation-summary.md << EOF
        # 📚 Documentation Summary
        
        ## 📋 Generated Documentation
        - ✅ API Documentation (Swagger)
        - ✅ Architecture Documentation
        - ✅ Deployment Guide
        - ✅ API Reference
        - ✅ Code Documentation
        
        ## 📊 Documentation Statistics
        - **Total Files:** $(find docs/ -type f | wc -l)
        - **API Endpoints:** $(find docs/api/ -name "*.json" | wc -l)
        - **Last Updated:** $(date '+%Y-%m-%d %H:%M:%S UTC')
        
        ## 🔗 Quick Links
        - [API Documentation](api/)
        - [Architecture Guide](architecture.md)
        - [Deployment Guide](deployment.md)
        - [API Reference](api-reference.md)
        
        ---
        *Generated by Documentation Bot 📚*
        EOF
        
        echo "📋 Documentation summary created"