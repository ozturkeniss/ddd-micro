name: 📚 Documentation Bot

on:
  schedule:
    # Haftalık dokümantasyon güncelleme (Cuma 05:00 UTC)
    - cron: '0 5 * * 5'
  push:
    paths:
      - 'cmd/**/*.go'
      - 'internal/**/*.go'
      - 'api/**/*.proto'
  workflow_dispatch:

jobs:
  documentation-update:
    name: 📚 Documentation Updater
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Generate API Documentation
      run: |
        echo "📚 Generating API documentation..."
        
        # Install swag
        go install github.com/swaggo/swag/cmd/swag@latest
        
        # Generate swagger for all services
        swag init -g cmd/user/main.go -o cmd/user/docs
        swag init -g cmd/product/main.go -o cmd/product/docs
        swag init -g cmd/basket/main.go -o cmd/basket/docs
        swag init -g cmd/payment/main.go -o cmd/payment/docs
        
        echo "✅ API documentation generated"
    
    - name: Generate Code Documentation
      run: |
        echo "📚 Generating code documentation..."
        
        # Generate Go documentation
        mkdir -p docs/code
        godoc -url=/pkg > docs/code/go-docs.html || echo "No Go docs generated"
        
        # Generate function documentation
        find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" | head -20 | while read file; do
          echo "## $((basename $file))" >> docs/code/functions.md
          grep -n "^func " "$file" >> docs/code/functions.md || true
          echo "" >> docs/code/functions.md
        done
    
    - name: Update README with Statistics
      run: |
        echo "📚 Updating README with project statistics..."
        
        # Get project statistics
        TOTAL_FILES=$(find . -name "*.go" | wc -l)
        TOTAL_LINES=$(find . -name "*.go" -exec wc -l {} + | tail -1 | awk '{print $1}')
        TOTAL_FUNCTIONS=$(grep -r "^func " . --include="*.go" | wc -l)
        TOTAL_STRUCTS=$(grep -r "^type.*struct" . --include="*.go" | wc -l)
        TOTAL_INTERFACES=$(grep -r "^type.*interface" . --include="*.go" | wc -l)
        
        # Get commit statistics
        TOTAL_COMMITS=$(git rev-list --count HEAD)
        CONTRIBUTORS=$(git log --format='%aN' | sort -u | wc -l)
        
        # Update README if it has a statistics section
        if grep -q "## 📊 Project Statistics" README.md; then
          # Create a temporary file with updated statistics
          cat > temp_stats.md << EOF
        
        ## 📊 Project Statistics
        
        | Metric | Value |
        |--------|-------|
        | 📁 Total Go Files | $TOTAL_FILES |
        | 📝 Total Lines of Code | $TOTAL_LINES |
        | 🔧 Total Functions | $TOTAL_FUNCTIONS |
        | 🏗️ Total Structs | $TOTAL_STRUCTS |
        | 🔌 Total Interfaces | $TOTAL_INTERFACES |
        | 📈 Total Commits | $TOTAL_COMMITS |
        | 👥 Contributors | $CONTRIBUTORS |
        | 📅 Last Updated | $(date '+%Y-%m-%d %H:%M:%S UTC') |
        
        EOF
          
          # Replace the statistics section
          sed -i '/## 📊 Project Statistics/,/^$/c\
        ' README.md
          cat temp_stats.md >> README.md
          rm temp_stats.md
        fi
    
    - name: Generate Service Documentation
      run: |
        echo "📚 Generating service-specific documentation..."
        
        # Create service documentation
        mkdir -p docs/services
        
        # User Service Documentation
        cat > docs/services/user-service.md << EOF
        # 👤 User Service Documentation
        
        ## Overview
        The User Service handles user authentication, registration, and profile management.
        
        ## Endpoints
        - \`POST /api/v1/users/register\` - Register a new user
        - \`POST /api/v1/users/login\` - User login
        - \`GET /api/v1/users/profile\` - Get user profile
        - \`PUT /api/v1/users/profile\` - Update user profile
        
        ## Database Schema
        - Users table with authentication fields
        - Roles and permissions system
        
        ## Dependencies
        - PostgreSQL database
        - JWT for authentication
        
        ---
        *Generated by Documentation Bot 📚*
        EOF
        
        # Product Service Documentation
        cat > docs/services/product-service.md << EOF
        # 🛍️ Product Service Documentation
        
        ## Overview
        The Product Service manages product catalog, inventory, and search functionality.
        
        ## Endpoints
        - \`GET /api/v1/products\` - List products
        - \`GET /api/v1/products/{id}\` - Get product details
        - \`POST /api/v1/admin/products\` - Create product (admin)
        - \`PUT /api/v1/admin/products/{id}\` - Update product (admin)
        
        ## Features
        - Product search and filtering
        - Category management
        - Inventory tracking
        - Admin product management
        
        ## Dependencies
        - PostgreSQL database
        - Redis for caching
        
        ---
        *Generated by Documentation Bot 📚*
        EOF
        
        # Basket Service Documentation
        cat > docs/services/basket-service.md << EOF
        # 🛒 Basket Service Documentation
        
        ## Overview
        The Basket Service manages user shopping carts and basket operations.
        
        ## Endpoints
        - \`GET /api/v1/users/basket\` - Get user basket
        - \`POST /api/v1/users/basket/items\` - Add item to basket
        - \`PUT /api/v1/users/basket/items\` - Update basket item
        - \`DELETE /api/v1/users/basket/items/{product_id}\` - Remove item
        
        ## Features
        - Session-based basket management
        - Item quantity management
        - Basket persistence
        
        ## Dependencies
        - Redis for session storage
        - User Service for authentication
        - Product Service for product data
        
        ---
        *Generated by Documentation Bot 📚*
        EOF
        
        # Payment Service Documentation
        cat > docs/services/payment-service.md << EOF
        # 💳 Payment Service Documentation
        
        ## Overview
        The Payment Service handles payment processing, payment methods, and refunds.
        
        ## Endpoints
        - \`POST /api/v1/payments\` - Create payment
        - \`GET /api/v1/payments\` - List payments
        - \`POST /api/v1/payments/{id}/process\` - Process payment
        - \`GET /api/v1/payment-methods\` - List payment methods
        - \`POST /api/v1/payment-methods\` - Add payment method
        
        ## Features
        - Multiple payment methods support
        - Payment processing workflows
        - Refund management
        - Admin payment management
        
        ## Dependencies
        - PostgreSQL database
        - Payment gateway integration
        - Kafka for event streaming
        
        ---
        *Generated by Documentation Bot 📚*
        EOF
    
    - name: Generate API Gateway Documentation
      run: |
        echo "📚 Generating API Gateway documentation..."
        
        cat > docs/api-gateway.md << EOF
        # 🌐 API Gateway Documentation
        
        ## Overview
        The API Gateway (KrakenD) provides a single entry point for all microservices.
        
        ## Configuration
        - **Port:** 8080
        - **Configuration File:** \`gateways/krakend/krakend.json\`
        
        ## Routes
        ### User Service Routes
        - \`POST /users/register\` → User Service
        - \`POST /users/login\` → User Service
        - \`GET /users/profile\` → User Service
        
        ### Product Service Routes
        - \`GET /products\` → Product Service
        - \`GET /products/{id}\` → Product Service
        - \`POST /admin/products\` → Product Service
        
        ### Basket Service Routes
        - \`GET /basket\` → Basket Service
        - \`POST /basket/items\` → Basket Service
        - \`PUT /basket/items\` → Basket Service
        
        ### Payment Service Routes
        - \`POST /payments\` → Payment Service
        - \`GET /payments\` → Payment Service
        - \`GET /payment-methods\` → Payment Service
        
        ## Features
        - Request routing and load balancing
        - Authentication and authorization
        - Rate limiting and caching
        - Request/response transformation
        
        ---
        *Generated by Documentation Bot 📚*
        EOF
    
    - name: Generate Deployment Documentation
      run: |
        echo "📚 Generating deployment documentation..."
        
        cat > docs/deployment.md << EOF
        # 🚀 Deployment Documentation
        
        ## Docker Compose Deployment
        
        ### Services
        - **User Service:** Port 8080
        - **Product Service:** Port 8081
        - **Basket Service:** Port 8083
        - **Payment Service:** Port 8084
        - **API Gateway:** Port 8080 (external)
        
        ### Databases
        - **User DB:** PostgreSQL (Port 5432)
        - **Product DB:** PostgreSQL (Port 5433)
        - **Basket DB:** PostgreSQL (Port 5434)
        - **Payment DB:** PostgreSQL (Port 5435)
        - **Redis:** Port 6379
        - **Kafka:** Port 9092
        
        ### Commands
        \`\`\`bash
        # Start all services
        make docker-up
        
        # Stop all services
        make docker-down
        
        # View logs
        make docker-logs
        
        # Rebuild and start
        make docker-rebuild
        \`\`\`
        
        ## Development Setup
        
        ### Prerequisites
        - Go 1.21+
        - Node.js 18+
        - Docker & Docker Compose
        
        ### Local Development
        \`\`\`bash
        # Install dependencies
        make install-deps
        
        # Generate documentation
        make swagger
        
        # Run tests
        make test
        
        # Start individual services
        make run-user
        make run-product
        make run-basket
        make run-payment
        \`\`\`
        
        ---
        *Generated by Documentation Bot 📚*
        EOF
    
    - name: Commit Documentation Updates
      run: |
        echo "📚 Committing documentation updates..."
        
        # Check if there are changes
        if ! git diff --quiet; then
          git config --local user.email "docs-bot@ddd-micro.com"
          git config --local user.name "📚 Documentation Bot"
          git add .
          git commit -m "📚 Auto-update: Regenerate documentation

        - Updated API documentation for all services
        - Generated service-specific documentation
        - Updated project statistics
        - Generated deployment documentation
        - Auto-committed by documentation bot"
          git push
          echo "✅ Documentation updated and committed"
        else
          echo "✅ No documentation updates needed"
        fi
    
    - name: Create Documentation Index
      run: |
        echo "📚 Creating documentation index..."
        
        cat > docs/README.md << EOF
        # 📚 DDD Microservices Documentation
        
        Welcome to the DDD Microservices documentation! This documentation is automatically generated and updated by our Documentation Bot.
        
        ## 📖 Documentation Sections
        
        ### 🏗️ Architecture
        - [API Gateway](./api-gateway.md) - API Gateway configuration and routes
        - [Deployment](./deployment.md) - Deployment and setup instructions
        
        ### 🔧 Services
        - [User Service](./services/user-service.md) - User management and authentication
        - [Product Service](./services/product-service.md) - Product catalog and inventory
        - [Basket Service](./services/basket-service.md) - Shopping cart management
        - [Payment Service](./services/payment-service.md) - Payment processing and methods
        
        ### 📊 Code Documentation
        - [Go Documentation](./code/go-docs.html) - Generated Go documentation
        - [Functions Reference](./code/functions.md) - Function documentation
        
        ## 🤖 Automated Documentation
        
        This documentation is automatically updated by our Documentation Bot every Friday at 05:00 UTC. The bot:
        
        - ✅ Regenerates API documentation from Swagger annotations
        - ✅ Updates project statistics and metrics
        - ✅ Creates service-specific documentation
        - ✅ Maintains deployment and setup guides
        - ✅ Generates code documentation
        
        ## 📅 Last Updated
        $(date '+%Y-%m-%d %H:%M:%S UTC')
        
        ---
        *Generated by Documentation Bot 📚*
        EOF
        
        # Commit documentation index
        git config --local user.email "docs-bot@ddd-micro.com"
        git config --local user.name "📚 Documentation Bot"
        git add docs/README.md
        git commit -m "📚 Documentation: Update documentation index

        - Created comprehensive documentation index
        - Updated navigation and structure
        - Auto-committed by documentation bot"
        git push
        echo "✅ Documentation index created and committed"
