name: 🤖 AI Assistant Bot

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited, synchronize]
  schedule:
    # Her gün saat 06:00'da çalış
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  ai-assistant:
    name: 🤖 AI Assistant
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.21'
    
    - name: Analyze code changes
      if: github.event_name == 'pull_request'
      run: |
        echo "🔍 Analyzing code changes..."
        
        # Get changed files
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
        
        # Analyze each changed file
        echo "## 📋 Code Analysis Report" > code-analysis.md
        echo "" >> code-analysis.md
        
        for file in $CHANGED_FILES; do
          if [[ $file == *.go ]]; then
            echo "### 🔍 Analyzing $file" >> code-analysis.md
            echo "" >> code-analysis.md
            
            # Check for common issues
            if grep -q "TODO\|FIXME\|XXX" "$file"; then
              echo "⚠️ **Warning:** Found TODO/FIXME comments:" >> code-analysis.md
              grep -n "TODO\|FIXME\|XXX" "$file" >> code-analysis.md
              echo "" >> code-analysis.md
            fi
            
            if grep -q "fmt.Print" "$file"; then
              echo "⚠️ **Warning:** Found fmt.Print statements (consider using proper logging):" >> code-analysis.md
              grep -n "fmt.Print" "$file" >> code-analysis.md
              echo "" >> code-analysis.md
            fi
            
            if grep -q "panic(" "$file"; then
              echo "🚨 **Critical:** Found panic statements:" >> code-analysis.md
              grep -n "panic(" "$file" >> code-analysis.md
              echo "" >> code-analysis.md
            fi
            
            # Check for error handling
            if ! grep -q "error" "$file" && grep -q "func.*(" "$file"; then
              echo "💡 **Suggestion:** Consider adding error handling to functions" >> code-analysis.md
              echo "" >> code-analysis.md
            fi
          fi
        done
        
        echo "🔍 Code analysis completed"
    
    - name: Generate code suggestions
      if: github.event_name == 'pull_request'
      run: |
        echo "💡 Generating code suggestions..."
        
        # Create suggestions based on common patterns
        cat > code-suggestions.md << 'EOF'
        # 💡 Code Improvement Suggestions
        
        ## 🎯 Best Practices
        - Use structured logging instead of fmt.Print
        - Add proper error handling to all functions
        - Consider using context.Context for cancellation
        - Add unit tests for new functions
        - Follow Go naming conventions
        
        ## 🔧 Code Quality
        - Remove TODO/FIXME comments before merging
        - Use proper error wrapping with fmt.Errorf
        - Consider using interfaces for better testability
        - Add comments for exported functions
        
        ## 🚀 Performance
        - Use sync.Pool for frequently allocated objects
        - Consider using channels for concurrent operations
        - Profile memory usage for large operations
        - Use context.WithTimeout for external calls
        
        ## 🔒 Security
        - Validate all input parameters
        - Use secure random number generation
        - Sanitize user inputs
        - Use HTTPS for external API calls
        
        ---
        *Generated by AI Assistant Bot 🤖*
        EOF
        
        echo "💡 Code suggestions generated"
    
    - name: Comment on pull request
      if: github.event_name == 'pull_request'
      run: |
        echo "💬 Commenting on pull request..."
        
        # Combine analysis and suggestions
        cat code-analysis.md code-suggestions.md > pr-comment.md
        
        # Comment on PR
        gh pr comment ${{ github.event.pull_request.number }} \
          --body-file pr-comment.md
      
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Analyze issues
      if: github.event_name == 'issues'
      run: |
        echo "🔍 Analyzing issue..."
        
        # Get issue details
        ISSUE_TITLE="${{ github.event.issue.title }}"
        ISSUE_BODY="${{ github.event.issue.body }}"
        
        # Analyze issue type and provide suggestions
        cat > issue-analysis.md << EOF
        # 🤖 AI Issue Analysis
        
        ## 📋 Issue Summary
        - **Title:** $ISSUE_TITLE
        - **Type:** $(if echo "$ISSUE_TITLE" | grep -qi "bug"; then echo "🐛 Bug Report"; elif echo "$ISSUE_TITLE" | grep -qi "feature"; then echo "✨ Feature Request"; else echo "📝 General Issue"; fi)
        
        ## 💡 Suggested Actions
        
        ### For Bug Reports
        - Add reproduction steps
        - Include error logs
        - Specify environment details
        - Add screenshots if applicable
        
        ### For Feature Requests
        - Describe the use case
        - Provide mockups/wireframes
        - Consider alternative solutions
        - Estimate complexity
        
        ### General Suggestions
        - Add relevant labels
        - Assign to appropriate team member
        - Link related issues/PRs
        - Set milestone if applicable
        
        ## 🔍 Code Analysis
        $(if echo "$ISSUE_BODY" | grep -qi "error\|exception\|panic"; then echo "- 🚨 Contains error information - good for debugging"; fi)
        $(if echo "$ISSUE_BODY" | grep -qi "feature\|enhancement\|improvement"; then echo "- ✨ Feature request detected"; fi)
        $(if echo "$ISSUE_BODY" | grep -qi "security\|vulnerability"; then echo "- 🔒 Security-related issue - high priority"; fi)
        
        ---
        *Analyzed by AI Assistant Bot 🤖*
        EOF
        
        echo "🔍 Issue analysis completed"
    
    - name: Comment on issue
      if: github.event_name == 'issues'
      run: |
        echo "💬 Commenting on issue..."
        
        # Comment on issue
        gh issue comment ${{ github.event.issue.number }} \
          --body-file issue-analysis.md
      
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Generate daily insights
      if: github.event_name == 'schedule'
      run: |
        echo "📊 Generating daily insights..."
        
        # Get current date
        CURRENT_DATE=$(date '+%Y-%m-%d')
        
        # Get project statistics
        TOTAL_ISSUES=$(gh issue list --state all | wc -l)
        OPEN_ISSUES=$(gh issue list --state open | wc -l)
        CLOSED_ISSUES=$(gh issue list --state closed | wc -l)
        TOTAL_PRS=$(gh pr list --state all | wc -l)
        OPEN_PRS=$(gh pr list --state open | wc -l)
        
        # Get recent activity
        RECENT_COMMITS=$(git log --since="1 day ago" --oneline | wc -l)
        RECENT_ISSUES=$(gh issue list --created "$(date -d '1 day ago' '+%Y-%m-%d')" | wc -l)
        
        # Create daily insights
        cat > daily-insights-$CURRENT_DATE.md << EOF
        # 📊 Daily Project Insights - $CURRENT_DATE
        
        ## 📈 Project Statistics
        - **Total Issues:** $TOTAL_ISSUES (Open: $OPEN_ISSUES, Closed: $CLOSED_ISSUES)
        - **Total Pull Requests:** $TOTAL_PRS (Open: $OPEN_PRS)
        - **Recent Activity:** $RECENT_COMMITS commits, $RECENT_ISSUES new issues
        
        ## 🎯 Focus Areas
        $(if [ $OPEN_ISSUES -gt 10 ]; then echo "- 🚨 High number of open issues - consider prioritization"; fi)
        $(if [ $OPEN_PRS -gt 5 ]; then echo "- 🔄 Multiple open PRs - consider code review prioritization"; fi)
        $(if [ $RECENT_COMMITS -gt 20 ]; then echo "- 🚀 High development activity - great momentum!"; fi)
        
        ## 💡 AI Recommendations
        - Review open issues for stale ones
        - Prioritize security-related issues
        - Consider automated testing for critical paths
        - Update documentation for recent changes
        
        ## 🔍 Code Quality Trends
        - Recent commits: $RECENT_COMMITS
        - Code coverage: 🔄 (To be implemented)
        - Security scans: 🔄 (To be implemented)
        
        ---
        *Generated by AI Assistant Bot 🤖*
        EOF
        
        echo "📊 Daily insights generated"
    
    - name: Create daily insights issue
      if: github.event_name == 'schedule'
      run: |
        echo "📋 Creating daily insights issue..."
        
        # Create GitHub issue
        gh issue create \
          --title "📊 Daily Project Insights - $(date '+%Y-%m-%d')" \
          --body-file daily-insights-*.md \
          --label "insights,daily-summary,bot"
      
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Commit AI analysis
      run: |
        echo "💾 Committing AI analysis..."
        
        git config --local user.email "bot@ddd-micro.com"
        git config --local user.name "🤖 AI Assistant Bot"
        
        # Commit analysis files
        git add *.md
        git commit -m "🤖 Auto-analysis: AI assistant insights and suggestions

        - Generated code analysis and suggestions
        - Created daily project insights
        - Auto-committed by AI assistant bot" || echo "No changes to commit"
        
        git push || echo "Nothing to push"
        echo "✅ AI analysis committed"
