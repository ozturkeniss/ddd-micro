name: 🔍 Lint & Format Bot

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Haftalık lint kontrolü (Perşembe 09:00 UTC)
    - cron: '0 9 * * 4'
  workflow_dispatch:

jobs:
  lint-go:
    name: Lint Go Code
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      checks: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.23'
        cache: true
    
    - name: Download dependencies
      run: go mod download
    
    - name: Install goimports
      run: |
        go install golang.org/x/tools/cmd/goimports@latest
        echo "Goimports installed at: $(go env GOPATH)/bin/goimports"
    
    - name: Auto-fix Go formatting
      run: |
        # Fix formatting issues
        echo "Running gofmt..."
        gofmt -w .
        
        echo "Running goimports..."
        $(go env GOPATH)/bin/goimports -w .
        
        echo "Checking for changes..."
        # Check if there are changes
        if ! git diff --quiet; then
          echo "Found formatting changes, committing..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Auto-fix: Format Go code [skip ci]"
          git push
          echo "✅ Go formatting issues auto-fixed and committed"
        else
          echo "✅ No Go formatting issues found"
        fi
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
    
    - name: Run golangci-lint
      run: $(go env GOPATH)/bin/golangci-lint run ./...
    
    - name: Run go vet
      run: go vet ./...

  lint-frontend:
    name: Lint Frontend Code
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      checks: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install dependencies
      run: |
        cd client
        npm ci
    
    - name: Auto-fix Frontend formatting
      run: |
        cd client
        
        # Fix ESLint issues that can be auto-fixed
        npm run lint:fix || true
        
        # Fix Prettier formatting
        npm run format
        
        # Check if there are changes
        cd ..
        if ! git diff --quiet; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Auto-fix: Format frontend code [skip ci]"
          git push
          echo "✅ Frontend formatting issues auto-fixed and committed"
        else
          echo "✅ No frontend formatting issues found"
        fi
    
    - name: Run ESLint (strict check)
      run: |
        cd client
        npm run lint
    
    - name: Run TypeScript check
      run: |
        cd client
        npx tsc --noEmit
    
    - name: Check formatting with Prettier (strict check)
      run: |
        cd client
        npm run format:check

  test-go:
    name: Test Go Code
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      checks: write
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.23'
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: test_db
        JWT_SECRET: test-secret-key
