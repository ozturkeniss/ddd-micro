// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/ddd-micro/internal/payment/application"
	"github.com/ddd-micro/internal/payment/infrastructure"
	"github.com/ddd-micro/internal/payment/infrastructure/kafka"
	"github.com/ddd-micro/internal/payment/interfaces/http"
	"github.com/gin-gonic/gin"
)

// Injectors from wire.go:

func InitializeApp() (*App, func(), error) {
	configConfig := infrastructure.LoadConfig()
	db := infrastructure.NewPostgresDB(configConfig)
	paymentRepository := infrastructure.NewPaymentRepository(db)
	paymentMethodRepository := infrastructure.NewPaymentMethodRepository(db)
	refundRepository := infrastructure.NewRefundRepository(db)
	userClient, err := infrastructure.NewUserClient(configConfig)
	if err != nil {
		return nil, nil, err
	}
	productClient, err := infrastructure.NewProductClient(configConfig)
	if err != nil {
		return nil, nil, err
	}
	basketClient, err := infrastructure.NewBasketClient(configConfig)
	if err != nil {
		return nil, nil, err
	}
	stripeGateway := infrastructure.NewStripeGateway(configConfig)
	mockGateway := infrastructure.NewMockGateway()
	kafkaConfig := kafka.LoadConfig()
	kafkaPublisher, err := kafka.NewKafkaPublisher(kafkaConfig)
	if err != nil {
		return nil, nil, err
	}
	paymentEventPublisher := kafka.NewPaymentEventPublisher(kafkaPublisher)
	createPaymentCommandHandler := command.NewCreatePaymentCommandHandler(paymentRepository, stripeGateway)
	processPaymentCommandHandler := command.NewProcessPaymentCommandHandler(paymentRepository, stripeGateway)
	cancelPaymentCommandHandler := command.NewCancelPaymentCommandHandler(paymentRepository, stripeGateway)
	addPaymentMethodCommandHandler := command.NewAddPaymentMethodCommandHandler(paymentMethodRepository, stripeGateway)
	updatePaymentMethodCommandHandler := command.NewUpdatePaymentMethodCommandHandler(paymentMethodRepository)
	deletePaymentMethodCommandHandler := command.NewDeletePaymentMethodCommandHandler(paymentMethodRepository)
	getPaymentQueryHandler := query.NewGetPaymentQueryHandler(paymentRepository)
	listPaymentsQueryHandler := query.NewListPaymentsQueryHandler(paymentRepository)
	getPaymentMethodQueryHandler := query.NewGetPaymentMethodQueryHandler(paymentMethodRepository)
	listPaymentMethodsQueryHandler := query.NewListPaymentMethodsQueryHandler(paymentMethodRepository)
	paymentServiceCQRS := application.NewPaymentServiceCQRS(createPaymentCommandHandler, processPaymentCommandHandler, cancelPaymentCommandHandler, addPaymentMethodCommandHandler, updatePaymentMethodCommandHandler, deletePaymentMethodCommandHandler, getPaymentQueryHandler, listPaymentsQueryHandler, getPaymentMethodQueryHandler, listPaymentMethodsQueryHandler, paymentRepository, paymentMethodRepository, userClient, productClient, basketClient, paymentEventPublisher)
	ginEngine := http.NewRouter(paymentServiceCQRS, userClient)
	app := NewApp(ginEngine)
	return app, func() {
	}, nil
}
