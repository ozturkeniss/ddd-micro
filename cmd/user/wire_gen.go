// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/ddd-micro/internal/user/application"
	"github.com/ddd-micro/internal/user/application/command"
	"github.com/ddd-micro/internal/user/application/query"
	"github.com/ddd-micro/internal/user/infrastructure"
	"github.com/ddd-micro/internal/user/infrastructure/database"
	"github.com/ddd-micro/internal/user/infrastructure/monitoring"
	"github.com/ddd-micro/internal/user/interfaces/grpc"
	"github.com/ddd-micro/internal/user/interfaces/http"
	"github.com/gin-gonic/gin"
	grpc2 "google.golang.org/grpc"
)

// Injectors from wire.go:

// InitializeApp initializes the entire application with all dependencies
func InitializeApp() (*App, error) {
	config := infrastructure.ProvideConfig()
	databaseConfig := infrastructure.ProvideDatabaseConfig(config)
	database, err := infrastructure.ProvideDatabase(databaseConfig)
	if err != nil {
		return nil, err
	}
	userRepository := infrastructure.ProvideUserRepository(database)
	createUserHandler := command.NewCreateUserHandler(userRepository)
	updateUserHandler := command.NewUpdateUserHandler(userRepository)
	updateUserByAdminHandler := command.NewUpdateUserByAdminHandler(userRepository)
	deleteUserHandler := command.NewDeleteUserHandler(userRepository)
	changePasswordHandler := command.NewChangePasswordHandler(userRepository)
	assignRoleHandler := command.NewAssignRoleHandler(userRepository)
	string2 := infrastructure.ProvideJWTSecret()
	duration := application.ProvideTokenDuration()
	loginHandler := application.ProvideLoginHandler(userRepository, string2, duration)
	getUserByIDHandler := query.NewGetUserByIDHandler(userRepository)
	getUserByEmailHandler := query.NewGetUserByEmailHandler(userRepository)
	listUsersHandler := query.NewListUsersHandler(userRepository)
	jwtHelper := application.ProvideJWTHelper(string2, duration)
	userServiceCQRS := application.ProvideUserServiceCQRS(createUserHandler, updateUserHandler, updateUserByAdminHandler, deleteUserHandler, changePasswordHandler, assignRoleHandler, loginHandler, getUserByIDHandler, getUserByEmailHandler, listUsersHandler, jwtHelper)
	prometheusMetrics := monitoring.NewPrometheusMetrics()
	jaegerTracer, err := monitoring.ProvideJaegerTracer()
	if err != nil {
		return nil, err
	}
	engine := http.ProvideRouter(userServiceCQRS, prometheusMetrics, jaegerTracer)
	userServer := grpc.NewUserServer(userServiceCQRS)
	authInterceptor := grpc.NewAuthInterceptor(userServiceCQRS)
	server := grpc.ProvideGRPCServer(userServer, authInterceptor)
	app := NewApp(engine, server, userServiceCQRS, database, jaegerTracer)
	return app, nil
}

// wire.go:

// App holds all application dependencies
type App struct {
	HTTPRouter   *gin.Engine
	GRPCServer   *grpc2.Server
	UserService  *application.UserServiceCQRS
	Database     *database.Database
	JaegerTracer *monitoring.JaegerTracer
}

// NewApp creates a new App instance
func NewApp(
	httpRouter *gin.Engine,
	grpcServer *grpc2.Server,
	userService *application.UserServiceCQRS,
	db *database.Database,
	jaegerTracer *monitoring.JaegerTracer,
) *App {
	return &App{
		HTTPRouter:   httpRouter,
		GRPCServer:   grpcServer,
		UserService:  userService,
		Database:     db,
		JaegerTracer: jaegerTracer,
	}
}
