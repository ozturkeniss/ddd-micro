// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/ddd-micro/internal/product/application"
	"github.com/ddd-micro/internal/product/infrastructure/client"
	"github.com/ddd-micro/internal/product/infrastructure/config"
	"github.com/ddd-micro/internal/product/infrastructure/database"
	"github.com/ddd-micro/internal/product/infrastructure/monitoring"
	"github.com/ddd-micro/internal/product/infrastructure/persistence"
	productgrpc "github.com/ddd-micro/internal/product/interfaces/grpc"
	producthttp "github.com/ddd-micro/internal/product/interfaces/http"
	"github.com/gin-gonic/gin"
	"google.golang.org/grpc"
)

// InitializeApp initializes the entire application with all dependencies
func InitializeApp() (*App, error) {
	// Load configuration
	cfg := config.LoadConfig()

	// Create database connection
	db, err := database.NewPostgresConnection(cfg.Database)
	if err != nil {
		return nil, err
	}

	// Create product repository
	productRepo := persistence.NewProductRepository(db.GetDB())

	// Create user client
	userClient, err := client.NewUserClientFromConfig(&cfg.Client)
	if err != nil {
		return nil, err
	}

	// Create application services
	productService := application.NewProductServiceCQRS(productRepo)
	userService := application.NewUserService(userClient)

	// Create monitoring components
	prometheusMetrics := monitoring.NewPrometheusMetrics()
	jaegerTracer, err := monitoring.ProvideJaegerTracer()
	if err != nil {
		return nil, err
	}

	// Create HTTP handlers
	productHandler := producthttp.NewProductHandler(productService, prometheusMetrics)
	userHandler := producthttp.NewUserHandler(userService)
	authMiddleware := producthttp.NewAuthMiddleware(userService)

	// Create HTTP router
	httpRouter := producthttp.NewHTTPRouter(productHandler, userHandler, authMiddleware, prometheusMetrics, jaegerTracer)

	// Create gRPC server
	productServer := productgrpc.NewProductServer(productService)
	authInterceptor := productgrpc.NewAuthInterceptor(userService)
	grpcServer := productgrpc.ProvideGRPCServer(productServer, authInterceptor)

	// Create app
	app := &App{
		HTTPRouter:     httpRouter,
		GRPCServer:     grpcServer,
		ProductService: productService,
		UserService:    userService,
		Database:       db,
		UserClient:     userClient,
		JaegerTracer:   jaegerTracer,
	}

	return app, nil
}

// App holds all application dependencies
type App struct {
	HTTPRouter     *gin.Engine
	GRPCServer     *grpc.Server
	ProductService *application.ProductServiceCQRS
	UserService    *application.UserService
	Database       *database.Database
	UserClient     interface{ Close() error }
	JaegerTracer   *monitoring.JaegerTracer
}
