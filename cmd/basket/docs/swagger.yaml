basePath: /api/v1
definitions:
  application.AssignRoleRequest:
    properties:
      role:
        $ref: '#/definitions/domain.Role'
    required:
    - role
    type: object
  application.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 6
        type: string
    required:
    - current_password
    - new_password
    type: object
  application.CreateProductRequest:
    properties:
      barcode:
        type: string
      brand:
        type: string
      category:
        type: string
      color:
        type: string
      compare_price:
        type: number
      cost_price:
        type: number
      description:
        type: string
      dimensions:
        type: string
      images:
        type: string
      is_digital:
        type: boolean
      is_featured:
        type: boolean
      is_on_sale:
        type: boolean
      material:
        type: string
      max_stock:
        type: integer
      min_stock:
        type: integer
      name:
        type: string
      price:
        minimum: 0
        type: number
      short_description:
        type: string
      size:
        type: string
      sku:
        type: string
      sort_order:
        type: integer
      stock:
        minimum: 0
        type: integer
      sub_category:
        type: string
      tags:
        type: string
      weight:
        type: number
    required:
    - name
    - price
    - sku
    type: object
  application.CreateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  application.ListProductsResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      products:
        items:
          $ref: '#/definitions/application.ProductResponse'
        type: array
      total:
        type: integer
    type: object
  application.ListUsersResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/application.UserResponse'
        type: array
    type: object
  application.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  application.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/application.UserResponse'
    type: object
  application.ProductResponse:
    properties:
      barcode:
        type: string
      brand:
        type: string
      category:
        type: string
      color:
        type: string
      compare_price:
        type: number
      cost_price:
        type: number
      created_at:
        type: string
      description:
        type: string
      dimensions:
        type: string
      id:
        type: integer
      images:
        type: string
      is_active:
        type: boolean
      is_digital:
        type: boolean
      is_featured:
        type: boolean
      is_on_sale:
        type: boolean
      material:
        type: string
      max_stock:
        type: integer
      min_stock:
        type: integer
      name:
        type: string
      price:
        type: number
      short_description:
        type: string
      size:
        type: string
      sku:
        type: string
      sort_order:
        type: integer
      stock:
        type: integer
      sub_category:
        type: string
      tags:
        type: string
      updated_at:
        type: string
      view_count:
        type: integer
      weight:
        type: number
    type: object
  application.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  application.TokenResponse:
    properties:
      token:
        type: string
    type: object
  application.UpdateProductRequest:
    properties:
      barcode:
        type: string
      brand:
        type: string
      category:
        type: string
      color:
        type: string
      compare_price:
        type: number
      cost_price:
        type: number
      description:
        type: string
      dimensions:
        type: string
      images:
        type: string
      is_active:
        type: boolean
      is_digital:
        type: boolean
      is_featured:
        type: boolean
      is_on_sale:
        type: boolean
      material:
        type: string
      max_stock:
        type: integer
      min_stock:
        type: integer
      name:
        type: string
      price:
        type: number
      short_description:
        type: string
      size:
        type: string
      sort_order:
        type: integer
      stock:
        type: integer
      sub_category:
        type: string
      tags:
        type: string
      weight:
        type: number
    type: object
  application.UpdateUserByAdminRequest:
    properties:
      first_name:
        type: string
      is_active:
        type: boolean
      last_name:
        type: string
      role:
        $ref: '#/definitions/domain.Role'
    type: object
  application.UpdateUserRequest:
    properties:
      first_name:
        type: string
      last_name:
        type: string
    type: object
  application.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_name:
        type: string
      role:
        $ref: '#/definitions/domain.Role'
      updated_at:
        type: string
    type: object
  domain.Role:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - RoleUser
    - RoleAdmin
  dto.AddItemRequest:
    properties:
      product_id:
        type: integer
      quantity:
        minimum: 1
        type: integer
      unit_price:
        minimum: 0
        type: number
      user_id:
        type: integer
    required:
    - product_id
    - quantity
    - unit_price
    type: object
  dto.BasketItemResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      product_id:
        type: integer
      quantity:
        type: integer
      total_price:
        type: number
      unit_price:
        type: number
      updated_at:
        type: string
    type: object
  dto.BasketResponse:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      is_expired:
        type: boolean
      item_count:
        type: integer
      items:
        items:
          $ref: '#/definitions/dto.BasketItemResponse'
        type: array
      total:
        type: number
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.ErrorResponse:
    properties:
      code:
        type: string
      error:
        type: string
      message:
        type: string
    type: object
  dto.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.UpdateItemRequest:
    properties:
      quantity:
        minimum: 1
        type: integer
      user_id:
        type: integer
    required:
    - quantity
    type: object
  http.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8083
info:
  contact: {}
  description: Basket Service API for managing user baskets
  title: Basket Service API
  version: "1.0"
paths:
  /admin/baskets/{user_id}:
    delete:
      consumes:
      - application/json
      description: Deletes the basket for any user (admin only)
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user basket (Admin)
      tags:
      - admin
    get:
      consumes:
      - application/json
      description: Retrieves the basket for any user (admin only)
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BasketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user basket (Admin)
      tags:
      - admin
  /admin/baskets/cleanup:
    post:
      consumes:
      - application/json
      description: Removes all expired baskets from the system (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cleanup expired baskets (Admin)
      tags:
      - admin
  /admin/products:
    post:
      consumes:
      - application/json
      description: Create a new product (Admin only)
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/application.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/application.ProductResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - admin-products
  /admin/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - admin-products
    put:
      consumes:
      - application/json
      description: Update an existing product (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/application.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/application.ProductResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - admin-products
  /admin/users/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/application.UpdateUserByAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/application.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - BearerAuth: []
      summary: Update user by admin
      tags:
      - admin
  /admin/users/{id}/assign-role:
    post:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/application.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/application.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - BearerAuth: []
      summary: Assign role to user
      tags:
      - admin
  /products:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all products (Public)
      parameters:
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: 10
        description: Limit for pagination
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/application.ListProductsResponse'
      summary: List all products
      tags:
      - products
  /products/{id}:
    get:
      consumes:
      - application/json
      description: Get product details by ID (Public)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/application.ProductResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a product by ID
      tags:
      - products
  /products/search:
    get:
      consumes:
      - application/json
      description: Search products by name or other criteria (Public)
      parameters:
      - description: Search query
        in: query
        name: query
        type: string
      - description: Category filter
        in: query
        name: category
        type: string
      - description: Brand filter
        in: query
        name: brand
        type: string
      - description: Minimum price
        in: query
        name: min_price
        type: number
      - description: Maximum price
        in: query
        name: max_price
        type: number
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: 10
        description: Limit for pagination
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/application.ListProductsResponse'
      summary: Search products
      tags:
      - products
  /users:
    get:
      parameters:
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/application.ListUsersResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
  /users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/application.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
  /users/basket:
    get:
      consumes:
      - application/json
      description: Retrieves the basket for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BasketResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user's basket
      tags:
      - basket
    post:
      consumes:
      - application/json
      description: Creates a new basket for the authenticated user
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.BasketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new basket
      tags:
      - basket
  /users/basket/clear:
    delete:
      consumes:
      - application/json
      description: Removes all items from the user's basket
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Clear basket
      tags:
      - basket
  /users/basket/items:
    post:
      consumes:
      - application/json
      description: Adds a product to the user's basket
      parameters:
      - description: Add item request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AddItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BasketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add item to basket
      tags:
      - basket
  /users/basket/items/{product_id}:
    delete:
      consumes:
      - application/json
      description: Removes an item from the user's basket
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BasketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove basket item
      tags:
      - basket
    put:
      consumes:
      - application/json
      description: Updates the quantity of an item in the user's basket
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: Update item request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BasketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update basket item
      tags:
      - basket
  /users/change-password:
    post:
      consumes:
      - application/json
      parameters:
      - description: Password change data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/application.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/application.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/application.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response'
      summary: Login user
      tags:
      - users
  /users/profile:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/application.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      parameters:
      - description: Update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/application.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/application.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /users/refresh-token:
    post:
      consumes:
      - application/json
      parameters:
      - description: Token to refresh
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/application.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/application.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response'
      summary: Refresh JWT token
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/application.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/application.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response'
      summary: Register a new user
      tags:
      - users
  /users/validate-token:
    post:
      consumes:
      - application/json
      description: Validate a JWT token and return user information (User only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Validate JWT token
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
