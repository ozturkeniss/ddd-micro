// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/ddd-micro/internal/basket/application"
	"github.com/ddd-micro/internal/basket/infrastructure"
	basketgrpc "github.com/ddd-micro/internal/basket/interfaces/grpc"
	"github.com/ddd-micro/internal/basket/interfaces/http"
	"github.com/gin-gonic/gin"
	"google.golang.org/grpc"
)

// App represents the application dependencies
type App struct {
	HTTPRouter *gin.Engine
	GRPCServer *grpc.Server
}

// NewApp creates a new App instance
func NewApp(httpRouter *gin.Engine, grpcServer *grpc.Server) *App {
	return &App{
		HTTPRouter: httpRouter,
		GRPCServer: grpcServer,
	}
}

// Injectors from wire.go:

func InitializeApp() (*App, func(), error) {
	// Infrastructure layer
	config := infrastructure.NewConfig()
	redisClient := infrastructure.NewRedisClient(config)
	userClient := infrastructure.NewUserClient(config)
	productClient := infrastructure.NewProductClient(config)
	basketRepository := infrastructure.NewBasketRepository(redisClient)

	// Application layer
	basketServiceCQRS := application.NewBasketServiceCQRS(basketRepository, userClient, productClient)

	// HTTP interface layer
	httpRouter := http.NewHTTPRouter(basketServiceCQRS, userClient)

	// gRPC interface layer
	basketServer := basketgrpc.NewBasketServer(basketServiceCQRS)
	authInterceptor := basketgrpc.NewAuthInterceptor(&userClient)
	grpcServer := basketgrpc.NewGRPCServer(basketServer, authInterceptor)

	// Main app
	app := NewApp(httpRouter, grpcServer)
	return app, func() {
	}, nil
}
